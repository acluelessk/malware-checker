#!/usr/bin/env python3
import requests
import sys
import json
import os
import hashlib
import glob
import time
import psutil
from pathlib import Path

api_file="apikey"
#file_hash="filehashes" # pre-made file of hashes
path = Path("binaries")
#path = "hashes" 
hashed = "binhash" 

# Get API key from file
def get_api_key(api_file):
    try:
        with open(api_file, 'r') as f:
            return f.read().strip()
    except FileNotFoundError:
        print(api_file, "NOT FOUND!!!")

api_key = get_api_key(api_file)

# Get hash files in folder and write to a file of hashes
def hash_file(folder):
	# Get file from list of files (glob creates a list from the folder's contents)	
	for file in path.glob("*"):
		file = str(file)
		with open(file, 'rb') as inputfile:
			data = inputfile.read()
			#data = inputfile.read().encode('utf-8')
			with open(hashed, 'a') as f:
				f.write(hashlib.md5(data).hexdigest() +"\n")

# Get hash from file of hashes and check VT for matches
def check_hash(hashed): 
	try: 
		with open(hashed, 'r') as hashes:
			for line in hashes:
				url = 'https://www.virustotal.com/vtapi/v2/file/report'
				params = {'apikey': api_key, 'resource': line}
				response = requests.get(url, params=params)
				report = response.json()
				# print(json.dumps(report, sort_keys=True, indent=4)) # pretty formatting
				scans = report['scans']

				get_results(line,scans)

	except json.decoder.JSONDecodeError:
		print("Too many requests! Try again in: ")
		def countdown(t):
			while t:
				mins, secs = divmod(t, 60)
				timeformat = '{:02d}:{:02d}'.format(mins, secs)
				print(timeformat, end='\r')
				time.sleep(1)
				t -= 1
		countdown(20)
	   

def get_results(line,scans):			
	true_count=0
	false_count=0
	for scanner in scans:
		vendor = scans[scanner]
		for detected in vendor:
			value = vendor["detected"]
		if value == True:
			true_count+=1
		else:
			false_count+=1
	diff = true_count-false_count
	

	hash_report(true_count,false_count,diff,line)
	return true_count,false_count,diff

# Print results 
def hash_report(true,false,diff,line):
	
	print("File Hash: \t", line)
	print("Results: ")
	print("\033[5;31m \t \t", true, "\033[0;0m Detected")
	print("\033[5;32m \t \t", false, "\033[0;0m Undetected")
	print(" \033[0;0m")
	
	if diff > 10:
		print("\t \t File is: \033[5;31m Malware")
	else:
		print("\t \t File is: \033[5;32m NOT Malware")
	print(" \033[0;0m")
	print("\n \n \n \n \n ")


os.system("clear")
width = os.get_terminal_size().columns
border1 = "*" * width
print(border1, "\n")
print("Malware Checker Report".center(width), "\n")
print(border1)

# Run hash creation from files in folder
hash_file(path)
# Check hashes in VirusTotal
check_hash(hashed)


# Checks and prints the memory used by the script
process = psutil.Process(os.getpid())
process_mem_mb = process.memory_info().rss/1000000
print("Script Memory Usage:", process_mem_mb, "MB")

